<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="CStringBuilder" Id="{79373a45-1f4b-49ff-bd8a-456d74f0dd44}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CStringBuilder
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	pBuffer : POINTER TO BYTE;
	_maxBufferSize : UDINT; //defines max possible string length
	_currentUsedBufferSize : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Append" Id="{474915fc-a233-4555-a235-ca409caaa38d}">
      <Declaration><![CDATA[METHOD Append : POINTER TO BYTE
VAR_INPUT
	sValue : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Append := THIS^.AppendAny(sValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendAny" Id="{bd1b6489-49b2-0096-26d8-3075aa66e4a8}">
      <Declaration><![CDATA[// Appends the given value to the end of the string builder's contents.
METHOD AppendAny : POINTER TO BYTE
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	bMalloced : BOOL := TRUE;
	stringLength : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Value.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_STRING: 
		stringLength := GetUsedStringLength(Value.pValue);//F_StrLen(Value.pValue);
		
//	__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
//		Str_Len := TO_DINT(Tc2_Utilities.WLEN2(Value.pValue));
//		pValue := THIS^.Malloc(Str_Len);
//		Tc2_Utilities.WSTRING_TO_STRING2(pValue, Value.pValue, TO_UDINT(Str_Len));
		
	__SYSTEM.TYPE_CLASS.TYPE_BOOL,
	__SYSTEM.TYPE_CLASS.TYPE_BYTE,
	__SYSTEM.TYPE_CLASS.TYPE_WORD,
	__SYSTEM.TYPE_CLASS.TYPE_DWORD,
	__SYSTEM.TYPE_CLASS.TYPE_LWORD,
	__SYSTEM.TYPE_CLASS.TYPE_SINT,
	__SYSTEM.TYPE_CLASS.TYPE_INT,
	__SYSTEM.TYPE_CLASS.TYPE_DINT,
	__SYSTEM.TYPE_CLASS.TYPE_LINT,
	__SYSTEM.TYPE_CLASS.TYPE_USINT,
	__SYSTEM.TYPE_CLASS.TYPE_UINT,
	__SYSTEM.TYPE_CLASS.TYPE_UDINT,
	__SYSTEM.TYPE_CLASS.TYPE_ULINT,
	__SYSTEM.TYPE_CLASS.TYPE_REAL,
	__SYSTEM.TYPE_CLASS.TYPE_LREAL,
	__SYSTEM.TYPE_CLASS.TYPE_TIME,
	__SYSTEM.TYPE_CLASS.TYPE_LTIME,
	__SYSTEM.TYPE_CLASS.TYPE_DATE,
	__SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME,
	__SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY,
	__SYSTEM.TYPE_CLASS.TYPE_POINTER:
//		pValue := THIS^.Malloc(SIZEOF(T_LongString));
//		pValue^ := F_AnyToString(Value);
		stringLength := GetUsedStringLength(Value.pValue);//F_StrLen(pValue);
ELSE
	RETURN;
END_CASE

//check available size, existing size
IF stringLength = 0 THEN
	RETURN;
END_IF
//only copy if we do not exceed possible limit
IF THIS^._currentUsedBufferSize + stringLength >= THIS^._maxBufferSize THEN
	RETURN;
END_IF
MEMCPY(destAddr:=(THIS^.pBuffer + THIS^._currentUsedBufferSize), srcAddr:=Value.pValue, n:=stringLength);

THIS^._currentUsedBufferSize := THIS^._currentUsedBufferSize + stringLength;

AppendAny := THIS^.pBuffer;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentBufferSize" Id="{81e32561-fd56-4c8d-a3f6-4b792bb65c46}">
      <Declaration><![CDATA[PROPERTY CurrentBufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{fd79a365-f513-441f-9fae-cf28cdbe0b18}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentBufferSize := THIS^._currentUsedBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{4a26b5d9-82d1-4eb6-9e4f-48c0e834ad47}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	maxBufferSize : UDINT; //defines max possible string length
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// TODO: add logging for failed allocation
THIS^.pBuffer := __NEW(BYTE, maxBufferSize);
THIS^._maxBufferSize := maxBufferSize;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetUsedStringLength" Id="{d2916a93-b823-422f-aa12-59c615f2b767}">
      <Declaration><![CDATA[METHOD GetUsedStringLength : UDINT
VAR_INPUT
	pByte : POINTER TO BYTE;
END_VAR
VAR
    i : UDINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//every string in twincat is 0 terminated
IF pByte = 0 THEN
	RETURN;
END_IF

WHILE (pByte^ <> 0) DO
    pByte := pByte + 1; // Pointer auf das nächste Byte verschieben
    i := i + 1;
END_WHILE;

GetUsedStringLength := i;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaxBufferSize" Id="{cd6561ae-aca3-438b-a685-cbb63239aa56}">
      <Declaration><![CDATA[PROPERTY MaxBufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{0d67c07e-bac9-47d4-9ccb-9b715c3a7fe9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxBufferSize := THIS^._maxBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{027044e4-4377-4c44-9597-421e0eeb6261}">
      <Declaration><![CDATA[METHOD Reset : POINTER TO BYTE;
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.pBuffer = 0 THEN
	RETURN;
END_IF

MEMSET(destAddr:=THIS^.pBuffer, fillByte:=0, n:=THIS^.MaxBufferSize);

Reset := THIS^.pBuffer;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CStringBuilder">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Append">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.AppendAny">
      <LineId Id="4" Count="2" />
      <LineId Id="9" Count="32" />
      <LineId Id="59" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="67" Count="5" />
      <LineId Id="64" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.CurrentBufferSize.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.FB_init">
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.GetUsedStringLength">
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="4" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.MaxBufferSize.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Reset">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
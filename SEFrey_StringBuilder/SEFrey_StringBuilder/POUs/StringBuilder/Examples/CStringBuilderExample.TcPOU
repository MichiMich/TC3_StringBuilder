<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="CStringBuilderExample" Id="{447b65b5-cd1a-4395-a4b5-8fe33216f0df}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CStringBuilderExample
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//run tests
	startClassAndInitializationTest, startSimpleUseTest : BOOL;

	
	simpleUseOutput1, simpleUseOutput2 : STRING(200);

	
	StringBuilder : CStringBuilder; 
	Value : STRING(255) := 'Dieser Text ist genau 250 Zeichen lang und wird verwendet, um zu zeigen, wie TwinCAT 3 Strings handhabt. Es handelt sich um einen langen Satz, der viele verschiedene Themen behandelt, wie z.B. Programmierung, Automatisierungstechnik, SPS-Programmieru';
	currentString:  STRING(3000);
	pResult : POINTER TO BYTE;
	Stage, SimpleUseStage : INT;
	
	stStringBuilderPara : ST_StringBuilderPara := (MaxBufferSize:=3000);
	
 	boolExample : BOOL := TRUE;
    byteExample : BYTE := 16#FF;
    wordExample : WORD := 16#FFFF;
    dwordExample : DWORD := 16#FFFFFFFF;
    lwordExample : LWORD := 16#FFFFFFFFFFFFFFFF;
    sintExample : SINT := -128;
    intExample : INT := -32768;
    dintExample : DINT := -2147483648;
    lintExample : LINT := -9223372036854775808;
    usintExample : USINT := 255;
    uintExample : UINT := 65535;
    udintExample : UDINT := 4294967295;
    ulintExample : ULINT := 18446744073709551615;
    realExample : REAL := 1.0;
    lrealExample : LREAL := 1.0;
    timeExample : TIME := T#5s;
    dateExample : DATE := D#2023-01-01;
    todExample : TOD := TOD#12:00:00;
    dtExample : DT := DT#2023-01-01-12:00:00;
    stringExample : STRING := 'I am a string';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ClassAndInitialization" Id="{9ca5d71e-b86e-4038-966d-0f5f3c1e1bc0}">
      <Declaration><![CDATA[METHOD ClassAndInitialization : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Stage OF
	
	0:
		IF startClassAndInitializationTest THEN
			startClassAndInitializationTest := FALSE;
			StringBuilder.Init(pPara:=ADR(THIS^.stStringBuilderPara));
			Stage := 1;
		END_IF
		
	1:
		StringBuilder
            .Append(Value:='This is a bool: ')
            .AppendAny(Value:=boolExample)
            .Append(Value:=', This is a byte: ')
            .AppendAny(Value:=byteExample)
            .Append(Value:=', This is a word: ')
            .AppendAny(Value:=wordExample)
            .Append(Value:=', This is a dword: ')
            .AppendAny(Value:=dwordExample)
            .Append(Value:=', This is a lword: ')
            .AppendAny(Value:=lwordExample)
            .Append(Value:=', This is a sint: ')
            .AppendAny(Value:=sintExample)
            .Append(Value:=', This is an int: ')
            .AppendAny(Value:=intExample);
			
			//separation done, compiling + logging in needs pretty long for chains longer than 14
			StringBuilder
			.Append(Value:=', This is a dint: ')
            .AppendAny(Value:=dintExample)
            .Append(Value:=', This is a lint: ')
            .AppendAny(Value:=lintExample)
            .Append(Value:=', This is a usint: ')
            .AppendAny(Value:=usintExample)
            .Append(Value:=', This is a uint: ')
            .AppendAny(Value:=uintExample)
            .Append(Value:=', This is a udint: ')
            .AppendAny(Value:=udintExample)
            .Append(Value:=', This is a ulint: ')
            .AppendAny(Value:=ulintExample)
            .Append(Value:=', This is a real: ')
            .AppendAny(Value:=realExample);
			
			StringBuilder
            .Append(Value:=', This is an lreal: ')
            .AppendAny(Value:=lrealExample)
            .Append(Value:=', This is a time: ')
            .AppendAny(Value:=timeExample)
            .Append(Value:=', This is a date: ')
            .AppendAny(Value:=dateExample)
            .Append(Value:=', This is a tod: ')
            .AppendAny(Value:=todExample)
            .Append(Value:=', This is a dt: ')
            .AppendAny(Value:=dtExample)
            .Append(Value:=', This is a string: ')
            .AppendAny(Value:=stringExample);
		// show string data
		StringBuilder.Copy(pDest:=ADR(currentString), n:=SIZEOF(currentString));
		Stage := 2;
		
		2:
			StringBuilder.Clear();
			Stage := 0;
		
		
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimpleUse" Id="{f437f28c-d69e-49c0-8953-8b8986bbba39}">
      <Declaration><![CDATA[METHOD SimpleUse : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// build string, copy to destination

CASE SimpleUseStage OF


	0:
		IF THIS^.startSimpleUseTest THEN
			startSimpleUseTest := FALSE;
			//build string, copy to given destination
			BuildString(nSizeDest:=SIZEOF(simpleUseOutput1))
			.AppendAny(boolExample)
			.AppendAny(dintExample)
			.Copy(pDest:=ADR(simpleUseOutput1), n:=SIZEOF(simpleUseOutput1));
			SimpleUseStage := 1;
		END_IF
		
	1: //clear buffer, fill + copy to next string
		BuildString(nSizeDest:=SIZEOF(simpleUseOutput2))
		.Clear()
		.AppendAny(dwordExample)
		.AppendAny(dtExample)
		.AppendAny(stringExample)
		.Copy(pDest:=ADR(simpleUseOutput2), n:=SIZEOF(simpleUseOutput2));
		SimpleUseStage := 0;
	
	
	
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CStringBuilderExample">
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilderExample.ClassAndInitialization">
      <LineId Id="8" Count="2" />
      <LineId Id="139" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="67" Count="11" />
      <LineId Id="63" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="133" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="94" Count="9" />
      <LineId Id="137" Count="1" />
      <LineId Id="104" Count="11" />
      <LineId Id="17" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="157" Count="3" />
      <LineId Id="127" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilderExample.SimpleUse">
      <LineId Id="11" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
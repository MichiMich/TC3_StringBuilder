<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="CStringBuilder" Id="{79373a45-1f4b-49ff-bd8a-456d74f0dd44}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_assign'}
{attribute 'enable_dynamic_creation'}
{attribute 'no_explicit_call' := 'do not call this POU directly'}
{attribute 'reflection'} 
FUNCTION_BLOCK CStringBuilder IMPLEMENTS I_StringBuilder
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	pBuffer : POINTER TO BYTE;
	_maxBufferSize : UDINT; //defines max possible string length
	_currentUsedBufferSize : UDINT;
	
	{attribute 'instance-path'} 
    {attribute 'noinit'} 
    sPath : STRING; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AnyToString" Id="{5ead9a6d-2f38-4e44-8a90-6d0ccb4b52ed}">
      <Declaration><![CDATA[METHOD AnyToString : STRING
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	pBool			: POINTER TO BOOL;
    pByte			: POINTER TO BYTE;
    pWord			: POINTER TO WORD;
    pDWord			: POINTER TO DWORD;
    pLWord			: POINTER TO LWORD;
    pSint			: POINTER TO SINT;
    pInt			: POINTER TO INT;
    pDint			: POINTER TO DINT;
    pLint			: POINTER TO LINT;
    pUSint			: POINTER TO USINT;
    pUInt			: POINTER TO UINT;
    pUDint			: POINTER TO UDINT;
    pULint			: POINTER TO ULINT;
    pReal			: POINTER TO REAL;
    pLReal			: POINTER TO LREAL;
    pString			: POINTER TO T_MaxString;
    pWString		: POINTER TO WSTRING;
    pTime			: POINTER TO TIME;
    pDate			: POINTER TO DATE;
    pDateAndTime	: POINTER TO DATE_AND_TIME;
    pTimeOfDay		: POINTER TO TIME_OF_DAY;
    pPointer		: PVOID;
	pLTime 			: POINTER TO LTIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Value.pValue = 0 THEN RETURN; END_IF;

CASE Value.TypeClass OF 
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		pBool := Value.pValue;
		AnyToString := TO_STRING(pBool^);
		
    __SYSTEM.TYPE_CLASS.TYPE_BYTE:
		pByte := Value.pValue;
		AnyToString := TO_STRING(pByte^);
		
    __SYSTEM.TYPE_CLASS.TYPE_WORD:
		pWord := Value.pValue;
		AnyToString := TO_STRING(pWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DWORD:
		pDWord := Value.pValue;
		AnyToString := TO_STRING(pDWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LWORD:
		pLWord := Value.pValue;
		AnyToString := TO_STRING(pLWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_SINT:
		pSint := Value.pValue;
		AnyToString := TO_STRING(pSint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_INT:
		pInt := Value.pValue;
		AnyToString := TO_STRING(pInt^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DINT:
		pDint := Value.pValue;
		AnyToString := TO_STRING(pDint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LINT:
		pLint := Value.pValue;
		AnyToString := TO_STRING(pLint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_USINT:
		pUSint := Value.pValue;
		AnyToString := TO_STRING(pUSint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_UINT:
		pUInt := Value.pValue;
		AnyToString := TO_STRING(pUInt^);
		
    __SYSTEM.TYPE_CLASS.TYPE_UDINT:
		pUDint := Value.pValue;
		AnyToString := TO_STRING(pUDint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_ULINT:
		pULint := Value.pValue;
		AnyToString := TO_STRING(pULint^);
		
   __SYSTEM.TYPE_CLASS.TYPE_REAL:
		pReal := Value.pValue;
		AnyToString := TO_STRING(pReal^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LREAL:
		pLReal := Value.pValue;
		AnyToString := TO_STRING(pLReal^);
		
    __SYSTEM.TYPE_CLASS.TYPE_STRING:
		pString := Value.pValue;
		AnyToString := TO_STRING(pString^);
		
   __SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		pWString := Value.pValue;
		AnyToString := TO_STRING(pWString^);
		
    __SYSTEM.TYPE_CLASS.TYPE_TIME:
		pTime := Value.pValue;
		AnyToString := TO_STRING(pTime^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DATE:
		pDate := Value.pValue;
		AnyToString := TO_STRING(pDate^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		pDateAndTime := Value.pValue;
		AnyToString := TO_STRING(pDateAndTime^);
		
    __SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		pTimeOfDay := Value.pValue;
		AnyToString := TO_STRING(pTimeOfDay^);
	
	__SYSTEM.TYPE_CLASS.TYPE_POINTER:
		AnyToString := TO_STRING(Value.pValue);
		
	__SYSTEM.TYPE_CLASS.TYPE_LTIME:
		pLTime := Value.pValue;
		AnyToString := TO_STRING(pLTime^);
ELSE
	RETURN; 
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append" Id="{474915fc-a233-4555-a235-ca409caaa38d}">
      <Declaration><![CDATA[METHOD Append : I_StringBuilder
VAR_INPUT
	Value : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Append := THIS^.AppendAny(Value);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendAny" Id="{bd1b6489-49b2-0096-26d8-3075aa66e4a8}">
      <Declaration><![CDATA[// Appends the given value to the end of the string builder's contents.
METHOD AppendAny : I_StringBuilder
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	stringLength : UDINT;
	convertedAny : STRING; 
	pValue : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AppendAny := THIS^;

IF THIS^.pBuffer = 0 THEN
	ADSLOGSTR(msgCtrlMask:= ADSLOG_MSGTYPE_ERROR, msgFmtStr:='Dynamic buffer null pointer, usage of StringBuilder not possible', '');
	RETURN;
END_IF

CASE Value.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_STRING: 
		pValue := Value.pValue;
		
	__SYSTEM.TYPE_CLASS.TYPE_BOOL,
	__SYSTEM.TYPE_CLASS.TYPE_BYTE,
	__SYSTEM.TYPE_CLASS.TYPE_WORD,
	__SYSTEM.TYPE_CLASS.TYPE_DWORD,
	__SYSTEM.TYPE_CLASS.TYPE_LWORD,
	__SYSTEM.TYPE_CLASS.TYPE_SINT,
	__SYSTEM.TYPE_CLASS.TYPE_INT,
	__SYSTEM.TYPE_CLASS.TYPE_DINT,
	__SYSTEM.TYPE_CLASS.TYPE_LINT,
	__SYSTEM.TYPE_CLASS.TYPE_USINT,
	__SYSTEM.TYPE_CLASS.TYPE_UINT,
	__SYSTEM.TYPE_CLASS.TYPE_UDINT,
	__SYSTEM.TYPE_CLASS.TYPE_ULINT,
	__SYSTEM.TYPE_CLASS.TYPE_REAL,
	__SYSTEM.TYPE_CLASS.TYPE_LREAL,
	__SYSTEM.TYPE_CLASS.TYPE_TIME,
	__SYSTEM.TYPE_CLASS.TYPE_LTIME,
	__SYSTEM.TYPE_CLASS.TYPE_DATE,
	__SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME,
	__SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY,
	__SYSTEM.TYPE_CLASS.TYPE_POINTER:
		convertedAny := AnyToString(Value);
		pValue := ADR(convertedAny);
ELSE
	RETURN;
END_CASE

stringLength := GetUsedStringLength(pByte:=pValue);

//check available size, existing size
IF stringLength = 0 THEN
	RETURN;
END_IF
//only copy if we do not exceed possible limit
IF THIS^._currentUsedBufferSize + stringLength >= THIS^._maxBufferSize THEN //>= because last byte needs to be 0 terminator and wont be touched here
	ADSLOGSTR(
		msgCtrlMask:=ADSLOG_MSGTYPE_ERROR,
		msgFmtStr:='BufferSize overflow at %s, building string cancelled',
		strArg:=THIS^.sPath
		);
	RETURN;
END_IF
MEMCPY(destAddr:=(THIS^.pBuffer + THIS^._currentUsedBufferSize), srcAddr:=pValue, n:=stringLength);

THIS^._currentUsedBufferSize := THIS^._currentUsedBufferSize + stringLength;]]></ST>
      </Implementation>
    </Method>
    <Property Name="BufferAddress" Id="{a5fb5549-c08a-4c47-8603-5eb042025092}">
      <Declaration><![CDATA[PROPERTY BufferAddress : POINTER TO BYTE]]></Declaration>
      <Get Name="Get" Id="{07c0f9ec-d4a4-48d3-adbc-6862f32f272f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BufferAddress := THIS^.pBuffer;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{027044e4-4377-4c44-9597-421e0eeb6261}">
      <Declaration><![CDATA[METHOD Clear : I_StringBuilder
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Clear := THIS^;
IF THIS^.pBuffer = 0 THEN
	RETURN;
END_IF

MEMSET(destAddr:=THIS^.pBuffer, fillByte:=0, n:=THIS^.MaxBufferSize);
_currentUsedBufferSize := 0;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Copy" Id="{f3bdf3b2-0ff0-4474-8b47-1ef85afdb62f}">
      <Declaration><![CDATA[METHOD Copy : BOOL
VAR_INPUT
	pDest : POINTER TO BYTE;
	n : UDINT; // Size of destination
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMCPY(destAddr:=pDest, srcAddr:=THIS^.BufferAddress, n:=MIN(n,_maxBufferSize));
Copy := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CurrentBufferSize" Id="{81e32561-fd56-4c8d-a3f6-4b792bb65c46}">
      <Declaration><![CDATA[PROPERTY CurrentBufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{fd79a365-f513-441f-9fae-cf28cdbe0b18}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CurrentBufferSize := THIS^._currentUsedBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetUsedStringLength" Id="{d2916a93-b823-422f-aa12-59c615f2b767}">
      <Declaration><![CDATA[METHOD GetUsedStringLength : UDINT
VAR_INPUT
	pByte : POINTER TO BYTE;
END_VAR
VAR
    i : UDINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//every string in twincat is 0 terminated
IF pByte = 0 THEN
	RETURN;
END_IF

WHILE (pByte^ <> 0) DO
    pByte := pByte + 1; // Pointer auf das nächste Byte verschieben
    i := i + 1;
END_WHILE;

GetUsedStringLength := i;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{a6ff0c47-f3ea-4483-8981-c259eb39a22c}">
      <Declaration><![CDATA[METHOD Init : I_StringBuilder
VAR_INPUT
	pPara : POINTER TO ST_StringBuilderPara;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// TODO: add logging for failed allocation
IF ParaErrors(pPara:=pPara) THEN
	RETURN;
END_IF

IF THIS^.pBuffer <> 0 THEN
	__DELETE(THIS^.pBuffer);
END_IF

THIS^.pBuffer := __NEW(BYTE, pPara^.MaxBufferSize);
THIS^._maxBufferSize := pPara^.MaxBufferSize;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaxBufferSize" Id="{cd6561ae-aca3-438b-a685-cbb63239aa56}">
      <Declaration><![CDATA[PROPERTY MaxBufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{0d67c07e-bac9-47d4-9ccb-9b715c3a7fe9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxBufferSize := THIS^._maxBufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ParaErrors" Id="{17c190cc-4470-4fb6-af3d-cbed72e8f47a}">
      <Declaration><![CDATA[{attribute 'reflection'} 
METHOD PRIVATE ParaErrors : BOOL
VAR_INPUT
	pPara : POINTER TO ST_StringBuilderPara;
END_VAR
VAR
	s1 : STRING := 'Invalid parametrization pointer at ';
	s2: T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pPara = 0 THEN
	CONCAT2(pSrcString1:=ADR(s1), pSrcString2:=ADR(THIS^.sPath), pDstString:=ADR(s2), nDstSize:=SIZEOF(s2));
	ADSLOGSTR(msgCtrlMask:= ADSLOG_MSGTYPE_ERROR, msgFmtStr:=s2, '');
	ParaErrors := TRUE;
	RETURN;
END_IF
IF pPara^.MaxBufferSize = 0 THEN
	s1 := 'BufferSize 0 given, Stringbuilder init failed at ';
	CONCAT2(pSrcString1:=ADR(s1), pSrcString2:=ADR(THIS^.sPath), pDstString:=ADR(s2), nDstSize:=SIZEOF(s2));
	ADSLOGSTR(msgCtrlMask:= ADSLOG_MSGTYPE_ERROR, msgFmtStr:=s2, '');
	ParaErrors := TRUE;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{89de333b-4dc5-4a97-80a0-6f8c11f6e476}">
      <Declaration><![CDATA[METHOD Reset : I_StringBuilder
VAR_INPUT
	pPara : POINTER TO ST_StringBuilderPara;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reset := THIS^;
Clear();

IF ParaErrors(pPara:=pPara) THEN
	RETURN;
END_IF

Init(pPara:=pPara);

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CStringBuilder">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.AnyToString">
      <LineId Id="6" Count="94" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Append">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.AppendAny">
      <LineId Id="80" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="14" Count="21" />
      <LineId Id="74" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="76" Count="1" />
      <LineId Id="59" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="106" Count="4" />
      <LineId Id="71" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.BufferAddress.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Clear">
      <LineId Id="12" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Copy">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.CurrentBufferSize.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.GetUsedStringLength">
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="18" Count="4" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Init">
      <LineId Id="12" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.MaxBufferSize.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.ParaErrors">
      <LineId Id="11" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="13" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CStringBuilder.Reset">
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="20" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>